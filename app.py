from flask import Flask, request
import requests
import os
import openai
import tempfile

app = Flask(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_SECRET = "chefbotsecret"
BOT_URL = f"https://api.telegram.org/bot{TOKEN}"

# Fonction d'envoi de message Telegram
def send_message(chat_id, text):
    requests.post(f"{BOT_URL}/sendMessage", json={"chat_id": chat_id, "text": text})

# Obtenir le chemin du fichier image sur Telegram
def get_file_path(file_id):
    response = requests.get(f"{BOT_URL}/getFile?file_id={file_id}")
    return response.json()["result"]["file_path"]

# Webhook pour g√©rer les messages re√ßus
@app.route("/chefbotsecret", methods=["POST"])
def webhook():
    update = request.get_json()
    print(update)

    if "message" in update:
        chat_id = update["message"]["chat"]["id"]

        # Si l'utilisateur envoie une photo d'ingr√©dients ou du frigo
        if "photo" in update["message"]:
            file_id = update["message"]["photo"][-1]["file_id"]
            file_path = get_file_path(file_id)
            image_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
            send_message(chat_id, "üì∏ Image re√ßue ! Analyse des ingr√©dients en cours...")

            try:
                # Appel GPT-4 Vision (exemple simul√©)
                vision_response = openai.chat.completions.create(
                    model="gpt-4-vision-preview",
                    messages=[
                        {"role": "system", "content": "Tu es un chef cuisinier alg√©rien et nutritionniste. Regarde l'image, identifie les ingr√©dients visibles, puis propose un ou plusieurs plats alg√©riens traditionnels que l'utilisateur peut pr√©parer avec. Inspire-toi des plats du quotidien des familles alg√©riennes, utilise des termes familiers et simples, et fais attention aux r√©alit√©s √©conomiques. Pour chaque plat, donne aussi une estimation approximative des calories totales (pas par ingr√©dient)."},
                        {"role": "user", "content": image_url}
                    ]
                )
                result_text = vision_response.choices[0].message.content
            except Exception as e:
                print(f"Erreur GPT Vision: {e}")
                result_text = "‚ùå Impossible d'analyser cette image. R√©essaie avec une photo plus claire du frigo ou des ingr√©dients."

            send_message(chat_id, result_text)
            return "ok"

        # Si l'utilisateur envoie un message texte (liste d'ingr√©dients ou demande de recette)
        user_text = update["message"].get("text", "")
        if user_text:
            try:
                gpt_reply = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Tu es un chef cuisinier alg√©rien et nutritionniste. Tu vis en Alg√©rie et tu connais bien les habitudes alimentaires, les ingr√©dients locaux, les plats traditionnels, les contraintes √©conomiques et les go√ªts des familles alg√©riennes. L'utilisateur te donne ce qu'il a dans son frigo ou une liste d'ingr√©dients. Propose-lui un ou plusieurs plats traditionnels alg√©riens simples, bon march√© et adapt√©s √† la r√©alit√© des foyers alg√©riens. Utilise un langage familier, simple et chaleureux. Pour chaque plat, donne aussi une estimation approximative des calories totales (pas par ingr√©dient)."},
                    {"role": "user", "content": user_text}
                ]
            )
                result_text = gpt_reply.choices[0].message.content
            except Exception as e:
                print(f"Erreur GPT Texte: {e}")
                result_text = "‚ùå Erreur lors de la g√©n√©ration du menu."

            send_message(chat_id, result_text)

    return "ok"
